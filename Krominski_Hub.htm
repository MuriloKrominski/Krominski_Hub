<!DOCTYPE html>
<html lang="pt-br">
<head>
    <!-- Author: Murilo Krominski - https://murilokrominski.github.io/ -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gerenciador de Tarefas Pessoal</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>
        body { font-family: 'Inter', sans-serif; }
        .task-card, .area-editor-item { transition: transform 0.2s, box-shadow 0.2s; }
        .task-card:hover { transform: translateY(-4px); box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05); }
        .modal { transition: opacity 0.3s ease; }
        .force-badge { font-weight: 700; font-size: 0.9rem; padding: 0.25rem 0.6rem; border-radius: 9999px; color: white; }
        .dropdown-content { display: none; }
        .dropdown:hover .dropdown-content { display: block; }
        #app-container, #login-container { display: none; } /* Escondido por padrão */
    </style>
</head>
<body class="bg-gray-100 text-gray-800">

    <!-- Tela de Login -->
    <div id="login-container" class="flex flex-col justify-center items-center h-screen text-center p-4">
        <h1 class="text-4xl font-bold text-gray-800 mb-2">Bem-vindo ao seu Gerenciador de Tarefas</h1>
        <p class="text-lg text-gray-600 mb-8">Entre com sua conta do Google para sincronizar suas tarefas em todos os dispositivos.</p>
        <button id="login-btn" class="bg-blue-600 text-white font-bold py-3 px-6 rounded-lg shadow-lg hover:bg-blue-700 transition-transform transform hover:scale-105 flex items-center gap-3">
            <i class="fab fa-google text-xl"></i>
            <span>Entrar com o Google</span>
        </button>
    </div>

    <!-- Conteúdo Principal do App -->
    <div id="app-container" class="flex flex-col md:flex-row h-screen">
        <!-- Barra Lateral de Categorias -->
        <aside class="w-full md:w-64 bg-white border-r border-gray-200 p-4 space-y-2 overflow-y-auto">
            <h1 class="text-2xl font-bold text-gray-900 mb-4">Áreas</h1>
            <div id="category-list" class="space-y-1"></div>
        </aside>

        <!-- Conteúdo Principal de Tarefas -->
        <main class="flex-1 p-4 md:p-6 lg:p-8 overflow-y-auto">
            <header class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6 gap-4">
                <h2 id="main-title" class="text-3xl font-bold text-gray-900">Todas as Tarefas</h2>
                <div class="flex items-center gap-4">
                    <button id="add-task-btn" class="bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg shadow-md hover:bg-blue-700 transition duration-300">
                        + Adicionar Tarefa
                    </button>
                     <div class="relative dropdown">
                        <button id="user-profile-btn" class="flex items-center gap-2">
                           <img id="user-photo" src="" alt="Foto do Usuário" class="w-10 h-10 rounded-full">
                        </button>
                        <div class="dropdown-content absolute right-0 mt-2 w-56 bg-white rounded-md shadow-lg z-20">
                            <div class="px-4 py-3 text-sm text-gray-900">
                                <div>Conectado como</div>
                                <div id="user-name" class="font-medium truncate"></div>
                            </div>
                            <a href="#" id="manage-areas-btn" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"><i class="fas fa-sitemap w-6"></i> Gerenciar Áreas</a>
                            <a href="#" id="backup-btn" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"><i class="fas fa-download w-6"></i> Fazer Backup (.xlsx)</a>
                            <a href="#" id="restore-btn" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"><i class="fas fa-upload w-6"></i> Restaurar Backup</a>
                            <div class="border-t border-gray-100"></div>
                            <a href="#" id="logout-btn" class="block px-4 py-2 text-sm text-red-600 hover:bg-gray-100"><i class="fas fa-sign-out-alt w-6"></i> Sair</a>
                        </div>
                    </div>
                    <input type="file" id="restore-file-input" class="hidden" accept=".xlsx, .xls">
                </div>
            </header>
            <div id="task-list" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4"></div>
            <div id="loading-spinner" class="hidden text-center mt-10">
                <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                <p class="mt-2 text-gray-600">Carregando...</p>
            </div>
        </main>
    </div>

    <!-- Modals -->
    <div id="areas-modal" class="modal hidden fixed inset-0 bg-black bg-opacity-50 z-40 flex justify-center items-center p-4">
        <div class="bg-white rounded-lg shadow-xl w-full max-w-2xl p-6 relative max-h-[80vh] flex flex-col">
            <h3 class="text-2xl font-bold mb-4">Gerenciar Áreas</h3>
            <p class="text-sm text-gray-500 mb-4">Arraste para reordenar. As alterações são salvas automaticamente.</p>
            <div id="areas-list-editor" class="space-y-2 overflow-y-auto flex-1"></div>
            <div class="mt-4 pt-4 border-t">
                <button id="add-area-btn" class="w-full bg-blue-100 text-blue-700 font-semibold py-2 px-4 rounded-lg hover:bg-blue-200 transition duration-300">+ Adicionar Nova Área</button>
            </div>
             <button id="close-areas-modal-btn" class="absolute top-4 right-4 text-gray-500 hover:text-gray-800 text-2xl">&times;</button>
        </div>
    </div>
    <div id="task-modal" class="modal hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-center items-center p-4">
        <div class="bg-white rounded-lg shadow-xl w-full max-w-lg p-6 relative">
            <h3 id="modal-title" class="text-2xl font-bold mb-6">Nova Tarefa</h3>
            <form id="task-form">
                <input type="hidden" id="task-id">
                <div class="mb-4">
                    <label for="task-name" class="block text-sm font-medium text-gray-700 mb-1">Nome da Tarefa</label>
                    <input type="text" id="task-name" class="w-full p-2 border border-gray-300 rounded-md" required>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                    <div>
                        <label for="task-category" class="block text-sm font-medium text-gray-700 mb-1">Área/Categoria</label>
                        <select id="task-category" class="w-full p-2 border border-gray-300 rounded-md"></select>
                    </div>
                    <div>
                        <label for="task-frequency" class="block text-sm font-medium text-gray-700 mb-1">Frequência</label>
                        <select id="task-frequency" class="w-full p-2 border border-gray-300 rounded-md">
                            <option value="🎯">🎯 Pontual</option>
                            <option value="🔁">🔁 Repetição</option>
                        </select>
                    </div>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                    <div>
                        <label for="task-importance" class="block text-sm font-medium text-gray-700 mb-1">Importância</label>
                        <select id="task-importance" class="w-full p-2 border border-gray-300 rounded-md">
                            <option value="4">❤️‍🔥 Urgente</option>
                            <option value="3">💙 Importante</option>
                            <option value="2">💛 Moderada</option>
                            <option value="1">🩶 Ponderar</option>
                        </select>
                    </div>
                    <div>
                        <label for="task-effort" class="block text-sm font-medium text-gray-700 mb-1">Esforço</label>
                        <select id="task-effort" class="w-full p-2 border border-gray-300 rounded-md">
                            <option value="4">🌕 Baixo</option>
                            <option value="3">🌔 Médio</option>
                            <option value="2">🌓 Alto</option>
                            <option value="1">🌑 Muito Alto</option>
                        </select>
                    </div>
                </div>
                <div class="mb-6">
                    <label for="task-goal" class="block text-sm font-medium text-gray-700 mb-1">Meta SMART (Opcional)</label>
                    <input type="text" id="task-goal" class="w-full p-2 border border-gray-300 rounded-md" placeholder="Ex: Perder 5kg até 31/12">
                </div>
                <div class="flex justify-end space-x-3">
                    <button type="button" id="cancel-btn" class="bg-gray-200 text-gray-800 font-semibold py-2 px-4 rounded-lg hover:bg-gray-300 transition duration-300">Cancelar</button>
                    <button type="submit" class="bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-blue-700 transition duration-300">Salvar Tarefa</button>
                </div>
            </form>
            <button id="close-modal-btn" class="absolute top-4 right-4 text-gray-500 hover:text-gray-800 text-2xl">&times;</button>
        </div>
    </div>
    <div id="restore-confirm-modal" class="modal hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-center items-center p-4">
        <div class="bg-white rounded-lg shadow-xl w-full max-w-md p-6 text-center">
            <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-yellow-100">
                <i class="fas fa-exclamation-triangle text-yellow-600 text-2xl"></i>
            </div>
            <h3 class="text-lg leading-6 font-medium text-gray-900 mt-4">Restaurar Backup</h3>
            <div class="mt-2 px-7 py-3">
                <p class="text-sm text-gray-500">
                    Você tem certeza? Isso substituirá TODAS as suas tarefas e áreas atuais pelos dados do arquivo de backup. Esta ação não pode ser desfeita.
                </p>
            </div>
            <div class="flex justify-center space-x-4 mt-4">
                <button id="cancel-restore-btn" class="py-2 px-4 bg-gray-200 text-gray-800 font-semibold rounded-lg hover:bg-gray-300">Cancelar</button>
                <button id="confirm-restore-btn" class="py-2 px-4 bg-yellow-500 text-white font-semibold rounded-lg hover:bg-yellow-600">Sim, restaurar</button>
            </div>
        </div>
    </div>

    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, onAuthStateChanged, GoogleAuthProvider, signInWithPopup, signOut } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, addDoc, doc, onSnapshot, updateDoc, deleteDoc, query, writeBatch, getDocs, orderBy } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // --- CONFIGURAÇÃO E ESTADO INICIAL ---
        const firebaseConfig = {
        apiKey: "AIzaSyC59KHuHiOKJa4gmbeCiQWJygqqUkkcdyU",
        authDomain: "krominski-hub.firebaseapp.com",
        projectId: "krominski-hub",
        storageBucket: "krominski-hub.firebasestorage.app",
        messagingSenderId: "447462209767",
        appId: "1:447462209767:web:caea1783c6f5fae853ca42",
        measurementId: "G-FZXEW9F9BG"
        };
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-task-manager';
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);

        let currentUser = null;
        let unsubscribeTasks = null;
        let unsubscribeCategories = null;
        let currentCategoryFilter = 'all';
        let restoreFileContent = null;
        let categories = [];
        let tasks = [];

        const importanceMap = { '4': { text: 'Urgente', emoji: '❤️‍🔥', color: 'bg-red-500' }, '3': { text: 'Importante', emoji: '💙', color: 'bg-blue-500' }, '2': { text: 'Moderada', emoji: '💛', color: 'bg-yellow-500' }, '1': { text: 'Ponderar', emoji: '🩶', color: 'bg-gray-500' }};
        const effortMap = { '4': { text: 'Baixo', emoji: '🌕' }, '3': { text: 'Médio', emoji: '🌔' }, '2': { text: 'Alto', emoji: '🌓' }, '1': { text: 'Muito Alto', emoji: '🌑' }};
        
        // --- ELEMENTOS DO DOM ---
        const loginContainer = document.getElementById('login-container');
        const appContainer = document.getElementById('app-container');
        const categoryList = document.getElementById('category-list');
        const taskList = document.getElementById('task-list');
        const mainTitle = document.getElementById('main-title');
        const loadingSpinner = document.getElementById('loading-spinner');
        const taskModal = document.getElementById('task-modal');
        const taskForm = document.getElementById('task-form');
        const taskCategorySelect = document.getElementById('task-category');
        const areasModal = document.getElementById('areas-modal');
        const areasListEditor = document.getElementById('areas-list-editor');
        const restoreConfirmModal = document.getElementById('restore-confirm-modal');
        const restoreFileInput = document.getElementById('restore-file-input');
        const userPhoto = document.getElementById('user-photo');
        const userName = document.getElementById('user-name');

        // --- FUNÇÕES DE RENDERIZAÇÃO E UI ---
        function showLoginUI() {
            loginContainer.style.display = 'flex';
            appContainer.style.display = 'none';
        }

        function showAppUI(user) {
            loginContainer.style.display = 'none';
            appContainer.style.display = 'flex';
            userPhoto.src = user.photoURL || 'https://placehold.co/40x40/E2E8F0/A0AEC0?text=U';
            userName.textContent = user.displayName || 'Usuário';
        }
        
        function clearUI() {
            taskList.innerHTML = '';
            categoryList.innerHTML = '';
            categories = [];
            tasks = [];
        }

        function renderAll() {
            renderCategories();
            renderTasks();
            populateCategorySelect();
            renderAreasModal();
        }

        function renderCategories() {
            categoryList.innerHTML = '';
            const allTasksButton = document.createElement('button');
            allTasksButton.className = `w-full text-left px-3 py-2 rounded-md font-medium flex items-center space-x-3 transition-colors ${currentCategoryFilter === 'all' ? 'bg-blue-100 text-blue-700' : 'hover:bg-gray-100'}`;
            allTasksButton.innerHTML = `<span>📋</span><span>Todas as Tarefas</span>`;
            allTasksButton.addEventListener('click', () => {
                currentCategoryFilter = 'all';
                mainTitle.textContent = 'Todas as Tarefas';
                renderAll();
            });
            categoryList.appendChild(allTasksButton);

            categories.forEach(cat => {
                const catElement = document.createElement('button');
                catElement.className = `w-full text-left px-3 py-2 rounded-md font-medium flex items-center space-x-3 transition-colors ${currentCategoryFilter === cat.id ? 'bg-blue-100 text-blue-700' : 'hover:bg-gray-100'}`;
                catElement.dataset.categoryId = cat.id;
                catElement.innerHTML = `<span>${cat.emoji}</span><span>${cat.name}</span>`;
                catElement.addEventListener('click', () => {
                    currentCategoryFilter = cat.id;
                    mainTitle.textContent = cat.name;
                    renderAll();
                });
                categoryList.appendChild(catElement);
            });
        }

        function renderTasks() {
            taskList.innerHTML = '';
            const filteredTasks = currentCategoryFilter === 'all' ? tasks : tasks.filter(t => t.category === currentCategoryFilter);
            
            if (filteredTasks.length === 0) {
                taskList.innerHTML = `<p class="text-gray-500 col-span-full text-center">Nenhuma tarefa encontrada.</p>`;
                return;
            }

            filteredTasks.sort((a, b) => b.forca - a.forca);

            filteredTasks.forEach(task => {
                const importance = importanceMap[task.importance] || importanceMap['1'];
                const effort = effortMap[task.effort] || effortMap['1'];
                const category = categories.find(c => c.id === task.category) || {};
                const card = document.createElement('div');
                card.className = `task-card bg-white rounded-lg shadow-md p-4 flex flex-col justify-between border-l-4 ${importance.color.replace('bg-', 'border-')}`;
                card.innerHTML = `
                    <div>
                        <div class="flex justify-between items-start">
                             <span class="text-xs font-semibold ${importance.color} text-white px-2 py-1 rounded-full">${importance.emoji} ${importance.text}</span>
                             <span class="force-badge ${importance.color}">Força: ${task.forca}</span>
                        </div>
                        <h4 class="font-bold text-lg mt-2 mb-1">${task.name}</h4>
                        ${task.goal ? `<p class="text-sm text-gray-500 mb-2 truncate" title="${task.goal}">🎯 Meta: ${task.goal}</p>` : ''}
                        <div class="text-sm text-gray-600 space-y-1 mt-3">
                            <p><strong>Área:</strong> ${category.emoji || ''} ${category.name || task.category}</p>
                            <p><strong>Esforço:</strong> ${effort.emoji} ${effort.text}</p>
                            <p><strong>Frequência:</strong> ${task.frequency}</p>
                        </div>
                    </div>
                    <div class="flex justify-end items-center mt-4 space-x-2">
                        <button data-task-id="${task.id}" class="edit-btn text-gray-400 hover:text-blue-600 transition-colors">Editar</button>
                        <button data-task-id="${task.id}" class="delete-btn text-gray-400 hover:text-red-600 transition-colors">Excluir</button>
                        <button data-task-id="${task.id}" data-completed="${task.completed}" class="complete-btn ${task.completed ? 'bg-green-500 text-white' : 'bg-gray-200 text-gray-700'} font-semibold py-1 px-3 rounded-full text-sm transition-colors">${task.completed ? 'Concluída' : 'Concluir'}</button>
                    </div>
                `;
                taskList.appendChild(card);
            });
        }

        function populateCategorySelect() {
            taskCategorySelect.innerHTML = '';
            categories.forEach(cat => {
                const option = document.createElement('option');
                option.value = cat.id;
                option.textContent = `${cat.emoji} ${cat.name}`;
                taskCategorySelect.appendChild(option);
            });
        }

        // --- AUTENTICAÇÃO ---
        function signInWithGoogle() {
            const provider = new GoogleAuthProvider();
            signInWithPopup(auth, provider).catch(error => {
                console.error("Erro no login com Google:", error);
                alert("Não foi possível fazer o login. Verifique se os pop-ups estão bloqueados.");
            });
        }

        function signOutUser() {
            signOut(auth).catch(error => {
                console.error("Erro ao sair:", error);
            });
        }

        // --- FIRESTORE DATA HANDLING ---
        function fetchData() {
            if (!currentUser) return;
            loadingSpinner.style.display = 'block';
            
            const catRef = collection(db, `users/${currentUser.uid}/categories`);
            const qCat = query(catRef, orderBy("order"));
            unsubscribeCategories = onSnapshot(qCat, async (snapshot) => {
                if (snapshot.empty) {
                    await createDefaultCategories();
                } else {
                    categories = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                }
                
                const taskRef = collection(db, `users/${currentUser.uid}/tasks`);
                unsubscribeTasks = onSnapshot(taskRef, (taskSnapshot) => {
                    tasks = taskSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                    loadingSpinner.style.display = 'none';
                    renderAll();
                });
            }, error => {
                console.error("Erro ao buscar categorias:", error);
                loadingSpinner.style.display = 'none';
            });
        }

        function stopDataListeners() {
            if (unsubscribeCategories) unsubscribeCategories();
            if (unsubscribeTasks) unsubscribeTasks();
        }

        // --- CATEGORY/AREA MANAGEMENT ---
        function renderAreasModal() {
            areasListEditor.innerHTML = '';
            categories.forEach((cat, index) => {
                const item = document.createElement('div');
                item.className = 'area-editor-item flex items-center gap-2 p-2 bg-gray-50 rounded-md';
                item.setAttribute('draggable', true);
                item.dataset.index = index;
                item.dataset.id = cat.id;

                item.innerHTML = `
                    <i class="fas fa-grip-vertical text-gray-400 cursor-move"></i>
                    <input type="text" value="${cat.emoji}" class="emoji-input w-10 text-center p-1 border rounded">
                    <input type="text" value="${cat.name}" class="name-input flex-1 p-1 border rounded">
                    <button class="delete-area-btn text-red-500 hover:text-red-700"><i class="fas fa-trash"></i></button>
                `;
                areasListEditor.appendChild(item);
            });
        }

        async function updateCategory(id, data) {
            const catRef = doc(db, `users/${currentUser.uid}/categories`, id);
            await updateDoc(catRef, data);
        }

        async function deleteCategory(id) {
            const tasksInCat = tasks.filter(t => t.category === id);
            if (tasksInCat.length > 0) {
                alert(`Não é possível excluir a área pois ela contém ${tasksInCat.length} tarefa(s). Por favor, mova as tarefas para outra área antes de excluir.`);
                return;
            }
            if (confirm("Tem certeza que deseja excluir esta área?")) {
                const catRef = doc(db, `users/${currentUser.uid}/categories`, id);
                await deleteDoc(catRef);
            }
        }
        
        async function addCategory() {
            const newOrder = categories.length > 0 ? Math.max(...categories.map(c => c.order)) + 1 : 0;
            const newCat = { name: "Nova Área", emoji: "�", order: newOrder };
            const catRef = collection(db, `users/${currentUser.uid}/categories`);
            await addDoc(catRef, newCat);
        }
        
        async function updateCategoryOrder() {
            const batch = writeBatch(db);
            const items = areasListEditor.querySelectorAll('.area-editor-item');
            items.forEach((item, index) => {
                const catRef = doc(db, `users/${currentUser.uid}/categories`, item.dataset.id);
                batch.update(catRef, { order: index });
            });
            await batch.commit();
        }

        // --- TASK MANAGEMENT ---
        async function saveTask(taskData) {
            if (!currentUser) return;
            try {
                if (taskData.id) {
                    const taskDocRef = doc(db, `users/${currentUser.uid}/tasks`, taskData.id);
                    const { id, ...dataToUpdate } = taskData;
                    await updateDoc(taskDocRef, dataToUpdate);
                } else {
                    const tasksRef = collection(db, `users/${currentUser.uid}/tasks`);
                    const { id, ...dataToAdd } = taskData;
                    await addDoc(tasksRef, dataToAdd);
                }
            } catch (error) { console.error("Erro ao salvar tarefa: ", error); }
        }
        
        // --- BACKUP & RESTORE ---
        function handleBackup() {
            if (!currentUser) return;
            const tasksToBackup = tasks.map(t => { const {id, ...rest} = t; return rest; });
            const categoriesToBackup = categories.map(c => { const {id, ...rest} = c; return rest; });

            const tasksWS = XLSX.utils.json_to_sheet(tasksToBackup);
            const categoriesWS = XLSX.utils.json_to_sheet(categoriesToBackup);
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, tasksWS, "Tarefas");
            XLSX.utils.book_append_sheet(wb, categoriesWS, "Áreas");
            const date = new Date().toISOString().slice(0, 10);
            XLSX.writeFile(wb, `backup-tarefas-${date}.xlsx`);
        }

        function handleFileSelect(event) {
            const file = event.target.files[0];
            if (!file) return;
            const reader = new FileReader();
            reader.onload = (e) => {
                restoreFileContent = e.target.result;
                restoreConfirmModal.classList.remove('hidden');
            };
            reader.readAsBinaryString(file);
            event.target.value = null;
        }

        async function processRestore() {
            restoreConfirmModal.classList.add('hidden');
            if (!currentUser || !restoreFileContent) return;
            try {
                const wb = XLSX.read(restoreFileContent, { type: 'binary' });
                const tasksToRestore = XLSX.utils.sheet_to_json(wb.Sheets["Tarefas"]);
                const categoriesToRestore = XLSX.utils.sheet_to_json(wb.Sheets["Áreas"]);

                loadingSpinner.style.display = 'block';
                const batch = writeBatch(db);

                const existingTasks = await getDocs(collection(db, `users/${currentUser.uid}/tasks`));
                existingTasks.forEach(doc => batch.delete(doc.ref));
                const existingCats = await getDocs(collection(db, `users/${currentUser.uid}/categories`));
                existingCats.forEach(doc => batch.delete(doc.ref));

                categoriesToRestore.forEach(cat => {
                    const newCatRef = doc(collection(db, `users/${currentUser.uid}/categories`));
                    batch.set(newCatRef, cat);
                });
                tasksToRestore.forEach(task => {
                    const newTaskRef = doc(collection(db, `users/${currentUser.uid}/tasks`));
                    batch.set(newTaskRef, task);
                });

                await batch.commit();
            } catch (error) {
                console.error("Erro ao restaurar backup: ", error);
                alert("Ocorreu um erro. Verifique se o arquivo de backup é válido.");
            } finally {
                loadingSpinner.style.display = 'none';
                restoreFileContent = null;
            }
        }
        
        // --- MODAL & EVENT LISTENERS ---
        function setupEventListeners() {
            document.getElementById('login-btn').addEventListener('click', signInWithGoogle);
            document.getElementById('logout-btn').addEventListener('click', signOutUser);
            document.getElementById('add-task-btn').addEventListener('click', () => openModal('task-modal'));
            document.getElementById('manage-areas-btn').addEventListener('click', () => openModal('areas-modal'));
            document.getElementById('backup-btn').addEventListener('click', handleBackup);
            document.getElementById('restore-btn').addEventListener('click', () => restoreFileInput.click());
            restoreFileInput.addEventListener('change', handleFileSelect);
            document.getElementById('close-modal-btn').addEventListener('click', () => closeModal('task-modal'));
            document.getElementById('cancel-btn').addEventListener('click', () => closeModal('task-modal'));
            taskForm.addEventListener('submit', handleTaskFormSubmit);
            document.getElementById('close-areas-modal-btn').addEventListener('click', () => closeModal('areas-modal'));
            document.getElementById('add-area-btn').addEventListener('click', addCategory);
            areasListEditor.addEventListener('change', e => {
                const item = e.target.closest('.area-editor-item');
                if (!item) return;
                const id = item.dataset.id;
                const emoji = item.querySelector('.emoji-input').value;
                const name = item.querySelector('.name-input').value;
                updateCategory(id, { emoji, name });
            });
            areasListEditor.addEventListener('click', e => {
                if (e.target.closest('.delete-area-btn')) {
                    const id = e.target.closest('.area-editor-item').dataset.id;
                    deleteCategory(id);
                }
            });

            let draggedItem = null;
            areasListEditor.addEventListener('dragstart', e => {
                draggedItem = e.target.closest('.area-editor-item');
                setTimeout(() => { draggedItem.style.opacity = '0.5'; }, 0);
            });
            areasListEditor.addEventListener('dragend', e => {
                setTimeout(() => {
                    if (draggedItem) {
                        draggedItem.style.opacity = '1';
                        draggedItem = null;
                        updateCategoryOrder();
                    }
                }, 0);
            });
            areasListEditor.addEventListener('dragover', e => {
                e.preventDefault();
                const afterElement = getDragAfterElement(areasListEditor, e.clientY);
                if (draggedItem) {
                    if (afterElement == null) {
                        areasListEditor.appendChild(draggedItem);
                    } else {
                        areasListEditor.insertBefore(draggedItem, afterElement);
                    }
                }
            });

            document.getElementById('cancel-restore-btn').addEventListener('click', () => closeModal('restore-confirm-modal'));
            document.getElementById('confirm-restore-btn').addEventListener('click', processRestore);
            window.addEventListener('click', e => {
                if (e.target === taskModal) closeModal('task-modal');
                if (e.target === areasModal) closeModal('areas-modal');
                if (e.target === restoreConfirmModal) closeModal('restore-confirm-modal');
            });

            taskList.addEventListener('click', e => {
                const target = e.target.closest('button');
                if (!target) return;
                const taskId = target.dataset.taskId;
                if (target.classList.contains('edit-btn')) {
                    const taskToEdit = tasks.find(t => t.id === taskId);
                    if (taskToEdit) openModal('task-modal', taskToEdit);
                } else if (target.classList.contains('delete-btn')) {
                    if (confirm("Tem certeza que deseja excluir esta tarefa?")) deleteDoc(doc(db, `users/${currentUser.uid}/tasks`, taskId));
                } else if (target.classList.contains('complete-btn')) {
                    const newStatus = target.dataset.completed !== 'true';
                    updateDoc(doc(db, `users/${currentUser.uid}/tasks`, taskId), { completed: newStatus });
                }
            });
        }
        
        function getDragAfterElement(container, y) {
            const draggableElements = [...container.querySelectorAll('.area-editor-item:not([style*="opacity"])')];
            return draggableElements.reduce((closest, child) => {
                const box = child.getBoundingClientRect();
                const offset = y - box.top - box.height / 2;
                if (offset < 0 && offset > closest.offset) {
                    return { offset: offset, element: child };
                } else {
                    return closest;
                }
            }, { offset: Number.NEGATIVE_INFINITY }).element;
        }

        function openModal(modalId, data = null) {
            if (modalId === 'task-modal') {
                taskForm.reset();
                document.getElementById('modal-title').textContent = data ? 'Editar Tarefa' : 'Nova Tarefa';
                document.getElementById('task-id').value = data ? data.id : '';
                document.getElementById('task-name').value = data ? data.name : '';
                document.getElementById('task-category').value = data ? data.category : (currentCategoryFilter === 'all' ? (categories[0]?.id || '') : currentCategoryFilter);
                document.getElementById('task-frequency').value = data ? data.frequency : '🎯';
                document.getElementById('task-importance').value = data ? data.importance : '3';
                document.getElementById('task-effort').value = data ? data.effort : '3';
                document.getElementById('task-goal').value = data ? data.goal || '' : '';
            }
            document.getElementById(modalId).classList.remove('hidden');
        }

        function closeModal(modalId) {
            document.getElementById(modalId).classList.add('hidden');
        }

        async function handleTaskFormSubmit(e) {
            e.preventDefault();
            const importance = parseInt(document.getElementById('task-importance').value, 10);
            const effort = parseInt(document.getElementById('task-effort').value, 10);
            const taskData = {
                id: document.getElementById('task-id').value || null,
                name: document.getElementById('task-name').value,
                category: document.getElementById('task-category').value,
                frequency: document.getElementById('task-frequency').value,
                importance: importance,
                effort: effort,
                forca: (importance * 10) + effort,
                goal: document.getElementById('task-goal').value,
                completed: tasks.find(t => t.id === document.getElementById('task-id').value)?.completed || false,
            };
            await saveTask(taskData);
            closeModal('task-modal');
        }

        async function createDefaultCategories() {
            const batch = writeBatch(db);
            const defaultCategories = [
                { name: 'Saúde Física', emoji: '🏋🏻‍♂️', order: 0 }, { name: 'Saúde Mental', emoji: '🧘🏻‍♂️', order: 1 },
                { name: 'Cachorra', emoji: '🦁', order: 2 }, { name: 'Pais', emoji: '👩🏻👨🏻', order: 3 },
                { name: 'Irmã', emoji: '👩🏼‍🦱', order: 4 }, { name: 'Vó', emoji: '👵🏻', order: 5 },
                { name: 'Loja', emoji: '🏪', order: 6 }, { name: 'Sítio', emoji: '🏡', order: 7 },
                { name: 'Casa', emoji: '🏠', order: 8 }, { name: 'Cursos e Estudos', emoji: '👨🏻‍🏫', order: 9 },
                { name: 'Contribuição/Legado', emoji: '🌎', order: 10 }, { name: 'Relacionamento Amoroso', emoji: '❤️', order: 11 },
                { name: 'Networking/Amizades', emoji: '🤝🏻', order: 12 }, { name: 'Renda/Negócios/Trabalho', emoji: '💵', order: 13 },
                { name: 'Ambiente', emoji: '🗄️', order: 14 }, { name: 'Lazer/Tempo Livre/Hobbies', emoji: '🎮', order: 15 },
                { name: 'Espiritualidade', emoji: '✡️', order: 16 },
            ];
            defaultCategories.forEach(cat => {
                const catRef = doc(collection(db, `users/${currentUser.uid}/categories`));
                batch.set(catRef, cat);
            });
            await batch.commit();
        }

        // --- INICIALIZAÇÃO ---
        function init() {
            setupEventListeners();
            onAuthStateChanged(auth, (user) => {
                stopDataListeners();
                clearUI();
                if (user) {
                    currentUser = user;
                    showAppUI(user);
                    fetchData();
                } else {
                    currentUser = null;
                    showLoginUI();
                }
            });
        }

        init();
    </script>
</body>
</html>
